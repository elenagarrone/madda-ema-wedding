// Grid system
//
// Generate semantic grid columns with these mixins.

// Calculate container-fixed padding based on a breakpoint
@mixin container-fixed-padding($breakpoint) {
  padding-left: floor((map-get($grid-gutters-widths, $breakpoint) / 2));
  padding-right: ceil((map-get($grid-gutters-widths, $breakpoint) / 2));
}

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include clearfix;
  @include container-fixed-padding(xxs);

  @media (min-width: $screen-xs-min) {
    @include container-fixed-padding(xs);
  }
  @media (min-width: $screen-sm-min) {
    @include container-fixed-padding(sm);
  }
  @media (min-width: $screen-md-min) {
    @include container-fixed-padding(md);
  }
  @media (min-width: $screen-lg-min) {
    @include container-fixed-padding(lg);
  }
}

// Calculate row margin based on a breakpoint
@mixin row-margin($breakpoint) {
  margin-left: ceil((map-get($grid-gutters-widths, $breakpoint) / -2));
  margin-right: floor((map-get($grid-gutters-widths, $breakpoint) / -2));
}

// Creates a wrapper for a series of columns
@mixin make-row() {
  @include clearfix;
  @include row-margin(xxs);

  @media (min-width: $screen-xs-min) {
    @include row-margin(xs);
  }
  @media (min-width: $screen-sm-min) {
    @include row-margin(sm);
  }
  @media (min-width: $screen-md-min) {
    @include row-margin(md);
  }
  @media (min-width: $screen-lg-min) {
    @include row-margin(lg);
  }
}

// Generate the extra extra small columns
@mixin make-xxs-column($columns, $gutter: map-get($grid-gutters-widths, xxs)) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xxs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xxs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xxs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: map-get($grid-gutters-widths, xs)) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-xs-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-xs-column-offset($columns) {
  @media (min-width: $screen-xs-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-xs-column-push($columns) {
  @media (min-width: $screen-xs-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-xs-column-pull($columns) {
  @media (min-width: $screen-xs-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: map-get($grid-gutters-widths, sm)) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: map-get($grid-gutters-widths, md)) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: map-get($grid-gutters-widths, lg)) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
